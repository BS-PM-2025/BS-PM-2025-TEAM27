pipeline {
  agent any

  environment {
    NODE_VERSION = 'v18.19.1'
    NODE_DIR = 'local_node'
    PATH = "${env.WORKSPACE}/${NODE_DIR}/bin:${env.PATH}"
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/BS-PM-2025/BS-PM-2025-TEAM27.git'
      }
    }

    stage('Inject .env File') {
      steps {
        echo 'üõ°Ô∏è Injecting secrets from Jenkins (not from Git)...'
        // üëá This reads the secret from Jenkins credentials
        withCredentials([string(credentialsId: 'openai-api-key', variable: 'OPENAI_API_KEY')]) {
          writeFile file: '.env', text: "OPENAI_API_KEY=${OPENAI_API_KEY}\n"
        }
      }
    }

    stage('Check Workspace') {
      steps {
        sh 'ls -la'
      }
    }

    stage('Install Python Dependencies') {
      steps {
        sh '''
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt
        '''
      }
    }

    stage('Run Backend Tests') {
      steps {
        sh 'python3 manage.py test accounts --settings=backend.settings'
      }
    }

    stage('Setup Node.js Locally') {
      steps {
        sh '''
          rm -rf ${NODE_DIR} node-${NODE_VERSION}-linux-x64
          curl -O https://nodejs.org/dist/${NODE_VERSION}/node-${NODE_VERSION}-linux-x64.tar.xz
          tar -xf node-${NODE_VERSION}-linux-x64.tar.xz
          mv node-${NODE_VERSION}-linux-x64 ${NODE_DIR}
        '''
      }
    }

    stage('Install Frontend Dependencies') {
      steps {
        dir('frontend') {
          sh 'npm install'
        }
      }
    }

    stage('Build Frontend') {
      steps {
        dir('frontend') {
          sh 'CI=false npm run build'
        }
      }
    }

    stage('Archive Frontend Build') {
      steps {
        archiveArtifacts artifacts: 'frontend/build/**', allowEmptyArchive: true
      }
    }
  }

  post {
    success {
      echo '‚úÖ Build successful!'
    }
    failure {
      echo '‚ùå Build failed.'
    }
    always {
      echo 'üßπ Pipeline done.'
    }
  }
}
