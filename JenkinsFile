pipeline {
  agent any

  environment {
    NODE_VERSION = 'v18.19.1'
    NODE_DIR = 'local_node'
    PATH = "${env.WORKSPACE}/${NODE_DIR}/bin:${env.PATH}"
    DJANGO_SETTINGS_MODULE = "backend.settings"
    PYTHONUNBUFFERED = 1
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/BS-PM-2025/BS-PM-2025-TEAM27.git'
      }
    }

    stage('Check Workspace') {
      steps {
        echo 'üìÇ Workspace contents:'
        sh 'ls -la'
      }
    }

    stage('Install Python Dependencies') {
      steps {
        echo 'üêç Installing backend dependencies...'
        sh '''
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt
        '''
      }
    }

    stage('Run Backend Tests') {
      steps {
        echo 'üß™ Running Django unit tests...'
        sh 'python3 manage.py test accounts --settings=backend.settings'
      }
    }

    stage('Setup Node.js Locally') {
      steps {
        echo '‚¨áÔ∏è Downloading Node.js...'
        sh '''
          rm -rf ${NODE_DIR} node-${NODE_VERSION}-linux-x64*
          curl -O https://nodejs.org/dist/${NODE_VERSION}/node-${NODE_VERSION}-linux-x64.tar.xz
          tar -xf node-${NODE_VERSION}-linux-x64.tar.xz
          mv node-${NODE_VERSION}-linux-x64 ${NODE_DIR}
        '''
      }
    }

    stage('Install Frontend Dependencies') {
      steps {
        dir('frontend') {
          echo 'üì¶ Installing frontend dependencies...'
          sh 'npm install'
        }
      }
    }

    stage('Build Frontend') {
      steps {
        dir('frontend') {
          echo 'üîß Building frontend...'
          sh 'CI=false npm run build'
        }
      }
    }

    stage('Archive Frontend Build') {
      steps {
        echo 'üóÉÔ∏è Archiving frontend build...'
        archiveArtifacts artifacts: 'frontend/build/**', allowEmptyArchive: true
      }
    }
  }

  post {
    success {
      echo '‚úÖ Build successful!'
    }
    failure {
      echo '‚ùå Build failed. Check the logs.'
    }
    always {
      echo 'üßπ Pipeline finished.'
    }
  }
}
